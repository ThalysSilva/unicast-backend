definitions:
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RefreshInput:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  handlers.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - name
    - password
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  services.LoginResponse:
    properties:
      accessToken:
        type: string
      jwe:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  services.RefreshResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user and return access and refresh tokens
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout a user and invalidate refresh token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.RefreshResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
